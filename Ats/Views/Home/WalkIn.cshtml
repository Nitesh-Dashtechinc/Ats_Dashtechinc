@model Ats.Models.ViewModel.PreInterRegisterViewModel
@{
    ViewBag.Title = "Applicant Tracking System";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript" src="~/Scripts/inputmaskJs.js"></script>
@*<script type='text/javascript' src="https://rawgit.com/RobinHerbots/jquery.inputmask/3.x/dist/jquery.inputmask.bundle.js"></script>*@
<style>
    label.error {
        color: red;
    }

    .field-validation-error {
        color: red;
    }

    .datepicker-width {
        max-width: 280px;
    }

    .minwidth {
        min-width: 100px;
    }

    .success-popup {
        transition: .3s ease all;
        font-family: 'Roboto', sans-serif;
    }

    .css-serial {
        counter-reset: serial-number; /* Set the serial number counter to 0 */
    }

        .css-serial td:first-child:before {
            counter-increment: serial-number; /* Increment the serial number counter */
            content: counter(serial-number); /* Display the counter */
        }
</style>
@if (ViewBag.errormessage != null)
{
    <div class="alert alert-danger alert-dismissible">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <strong>Error! </strong>@ViewBag.errormessage
    </div>
}
<div class="responsive-pt-5 text-center">
    <h2>
        <b>PRE-INTERVIEW FORM</b>
    </h2>
</div>
@using (Html.BeginForm("Register", "Home", FormMethod.Post, new { @id = "frmdetail" }))
{
    
    <div class="card shadow">
        <div class="card-header">
            <h5 class="text-primary">Personal Information</h5>
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">First Name</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.FirstName, new { @class = "form-control " })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.FirstName)
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Last Name</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.LastName, new { @class = "form-control ", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.LastName)
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Mobile No 1</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.MobileNo1, new { @class = "form-control only-number", @type = "number", @maxlength ="10", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.MobileNo1)
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Mobile No 2</label>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.MobileNo2, new { @class = "form-control only-number", @type = "number", @maxlength = "10" })

                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Email</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.EmailId, new { @class = "form-control", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.EmailId)
                            <span id="errorEmail" style="display:none;color:red;">Wrong email</span>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Date of Birth</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <div class="form-group input-group date">
                                @Html.TextBoxFor(Model => Model.PersonalInfo.DateOfBirth, new { @class = "form-control datepicker  col-8", @required = true })
                                <div class="input-group-append">
                                    <span class="input-group-text "><i class="fas fa-calendar-week"></i></span>
                                </div>
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.DateOfBirth)
                                <div class="col-4"><label class="control-label" id="Age"></label>Years</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Marital Status</label><span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <!-- Default inline 1-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.MaritalStaus, "Married", new { @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_MaritalStaus">Married</label>
                            </div>
                            <!-- Default inline 2-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.MaritalStaus, "UnMarried", new { @id = "PersonalInfo_MaritalStaus1", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_MaritalStaus1">Unmarried</label>
                            </div>
                            <!-- Default inline 3-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.MaritalStaus, "Other", new { @id = "PersonalInfo_MaritalStaus2", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_MaritalStaus2">Other</label>
                            </div>
                            <div>
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.MaritalStaus)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">No Of Children</label>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.NoOfChildren, new { @class = "form-control only-number", @type = "number", @maxlength = "1" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Gender</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <!-- Default inline 1-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.Gender, "Male", new { @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_Gender">Male</label>
                            </div>
                            <!-- Default inline 2-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.Gender, "Female", new { @id = "PersonalInfo_Gender1", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_Gender1">Female</label>
                            </div>
                            <!-- Default inline 3-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.Gender, "Other", new { @id = "PersonalInfo_Gender2", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_Gender2">Other</label>
                            </div>
                            <div>
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.Gender)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Vehicle</label>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <!-- Default inline 1-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.Vehicle, "2 wheeler", new { @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_Vehicle">2 wheeler</label>
                            </div>
                            <!-- Default inline 2-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.Vehicle, "Car", new { @id = "PersonalInfo_Vehicle1", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_Vehicle1">Car</label>
                            </div>
                            <!-- Default inline 3-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.Vehicle, "Other", new { @id = "PersonalInfo_Vehicle2", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_Vehicle2">Other</label>
                            </div>
                            <div>
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.Vehicle)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3 col-md-12">
                    <label class="control-label">Language Known</label>
                </div>
                <div class="table-responsive col-lg-9">
                    <table id="language" class="table table-language col-md-12">
                        <thead>
                            <tr>
                                <th>
                                    @*@Html.DropDownList("Language", new SelectList(ViewBag.language, "Value", "Text"), new { @class = "form-control" })*@
                                    @Html.DropDownList("Language", new List<SelectListItem>
                                    {
                                        new SelectListItem{ Text="English", Value = "1" },
                                        new SelectListItem{ Text="Gujarati", Value = "2" },
                                        new SelectListItem{ Text="Hindi", Value = "3" },
                                        new SelectListItem{ Text="SPANISH", Value = "4" },
                                        new SelectListItem{ Text="ARABIC", Value = "5" }
                                     },new { @class = "form-control col-md-10 col-12" })
                                </th>
                                <th class="text-center">
                                    @Html.CheckBox("Read", new { @class = "form-check-input", @checked = true })<label for="Read" class="control-label">Read</label>
                                </th>
                                <th class="text-center">
                                    @Html.CheckBox("Speak", new { @class = "form-check-input", @checked = true })<label for="Speak" class="control-label">Speak</label>
                                </th>
                                <th class="text-center">
                                    @Html.CheckBox("Write", new { @class = "form-check-input", @checked = true })<label for="Write" class="control-label">Write</label>
                                </th>
                                <th><button type="button" id="addrow1" class="btn btn-success fa fa-plus add-row"></button></th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="card shadow mt-2">
        <div class="card-header">
            <h5 class="text-primary">Present Address Information</h5>
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Address</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextAreaFor(Model => Model.PersonalInfo.AddressPresent, new { @class = "form-control ", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.AddressPresent)
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Pin code</label><span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.PincodePresent, new { @class = "form-control only-number", @type = "number", @maxlength = "6", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.PincodePresent)
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">State</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.DropDownListFor(Model => Model.PersonalInfo.StatePresent, new SelectList(ViewBag.stateList, "Value", "Text"), new { @class = "form-control", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.StatePresent)
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">City</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.DropDownListFor(Model => Model.PersonalInfo.CityPresent, new List<SelectListItem> { new SelectListItem { Text = "--Select City--", Value = "" } }, htmlAttributes: new { @class = "form-control", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.CityPresent)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card shadow mt-2">
        <div class="card-header">
            <div class="form-row">
                <div class="col-lg-4 col-md-6">
                    <h5 class="text-primary">
                        Permanent Address Information
                    </h5>
                </div>
                <div class="col-lg-4 col-md-6">
                    <div class="form-check pt-1">
                        <input class="form-check-input" type="checkbox" value="" id="asAboveCheck">
                        <label class="form-check-label font-weight-bold" for="asAboveCheck">
                            Same As Above
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">
                                Address
                            </label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextAreaFor(Model => Model.PersonalInfo.AddressPast, new { @class = "form-control " })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.AddressPast)
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Pin code</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.PinCodePast, new { @class = "form-control only-number", @type = "number", @maxlength = "6", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.PinCodePast)
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">State</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @if (ViewBag.PermanentStateList != null)
                            {
                                @Html.DropDownListFor(Model => Model.PersonalInfo.StatePast, new SelectList(ViewBag.PermanentStateList, "Value", "Text"), new { @class = "form-control", @required = true })
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.StatePast)
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">City</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.DropDownList("CityListPast", new List<SelectListItem> { new SelectListItem { Text = "--Select City--", Value = "" } }, htmlAttributes: new { @class = "form-control", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.CityPast)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card shadow mt-2">
        <div class="card-header">
            <h5 class="text-primary">Applied for Position</h5>
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Select Department</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @if (ViewBag.departmentList != null)
                            {
                                @Html.DropDownListFor(Model => Model.PersonalInfo.AppliedForDepartment, new SelectList(ViewBag.departmentList, "Value", "Text"), new { @class = "form-control", @required = true })
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.AppliedForDepartment)
                            }

                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Select Designation</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.DropDownListFor(Model => Model.PersonalInfo.AppliedForDesignation, new List<SelectListItem> { new SelectListItem { Text = "--Select Designation--", Value = "" } }, htmlAttributes: new { @class = "form-control", @required = true })
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.AppliedForDesignation)
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Total Experience</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <div class="form-group input-group">
                                @Html.TextBoxFor(Model => Model.PersonalInfo.TotalExperienceInYear, new { @class = "form-control number-dot", @type = "amount", @maxlength = "5", @required = true, placeholder = "Ex. 11.11 (In Years)" })
                            </div>
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.TotalExperienceInYear)
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Salary Expectation</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <div class="form-group input-group">
                                @Html.TextBoxFor(Model => Model.PersonalInfo.SalaryExpectation, new { @class = "form-control only-number col-8", @type = "number", @maxlength = "7", @required = true })
                                <div class="col-4 mr-3"><label>/Month</label></div>
                            </div>
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.SalaryExpectation)
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Early Joining Date</label><span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <div class="input-group" style="display:inline-flex">
                                @Html.TextBoxFor(Model => Model.PersonalInfo.EarliestJoinDate, new { @class = "form-control datepicker col-lg-8 col-md-12", @required = true })
                                <div class="input-group-append">
                                    <span class="input-group-text "><i class="fas fa-calendar-week"></i></span>
                                </div>
                            </div>
                            @*<div class="input-group date" data-provider="datepicker">
                                    @Html.TextBoxFor(Model => Model.PersonalInfo.EarliestJoinDate, new { @class = "form-control datepicker col-lg-8 col-md-12", @required = true })
                                    <span class="input-group-text input-group-addon"><i class="fas fa-calendar-week"></i></span>
                                </div>*@
                            @Html.ValidationMessageFor(Model => Model.PersonalInfo.EarliestJoinDate)
                        </div>

                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12 text-nowrap">
                            <label class="control-label">Comfortable Night Shift</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <!-- Default inline 1-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.NightShift, "true", new { @required = true, @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_NightShift">Yes</label>
                            </div>
                            <!-- Default inline 2-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.NightShift, "false", new { @required = true, @id = "PersonalInfo_NightShift1", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_NightShift1">No</label>
                            </div>
                            <div>
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.NightShift)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Job Source</label> <span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.JobSource, "News", new { @required = true, @id = "PersonalInfo_JobSource3", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_JobSource3">News</label>
                            </div>
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.JobSource, "Paper Ad", new { @required = true, @id = "PersonalInfo_JobSource4", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_JobSource4">Paper Ad</label>
                            </div>
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.JobSource, "Other", new { @required = true, @id = "PersonalInfo_JobSource5", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_JobSource5">Other</label>
                            </div>
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.JobSource, "HRCall", new { @required = true, @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_JobSource">HRCall</label>
                            </div>
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.JobSource, "Consultancy", new { @required = true, @id = "PersonalInfo_JobSource1", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_JobSource1">Consultancy</label>
                            </div>
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.JobSource, "JobPortal", new { @required = true, @id = "PersonalInfo_JobSource2", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_JobSource2">JobPortal</label>
                            </div>

                            <div>
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.JobSource)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12 text-nowrap">
                            <label class="control-label">Reference In DashTech?</label><span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            <!-- Default inline 1-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.IsReference, true, new { @required = true, @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_IsReference">Yes</label>
                            </div>
                            <!-- Default inline 2-->
                            <div class="custom-control custom-radio custom-control-inline">
                                @Html.RadioButtonFor(Model => Model.PersonalInfo.IsReference, false, new { @required = true, @id = "PersonalInfo_IsReference1", @class = "custom-control-input" })
                                <label class="custom-control-label" for="PersonalInfo_IsReference1">No</label>
                            </div>
                            <div>
                                @Html.ValidationMessageFor(Model => Model.PersonalInfo.IsReference)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row divrefernce">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Reference Name</label><span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.ReferenceName, new { @class = "form-control ", @required = true })
                            <span style="color:red" id="errRefName"></span>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12 text-nowrap">
                            <label class="control-label">Reference Designation</label><span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.ReferenceDesignation, new { @class = "form-control ", @required = true })
                            <span style="color:red" id="errRefDesignation"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row divrefernce">
                <div class="col-md-6">
                    <div class="form-group row">
                        <div class="col-lg-4 col-md-12">
                            <label class="control-label">Reference Mobile No</label><span class="text-danger">*</span>
                        </div>
                        <div class="col-lg-8 col-md-12">
                            @Html.TextBoxFor(Model => Model.PersonalInfo.ReferenceMobileNo, new { @class = "form-control only-number", @type = "number", @maxlength = "10", @required = true })
                            <span style="color:red" id="errRefMobileNo"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @Html.ValidationSummary(true)
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "frmpredetail" }))
{
    <div class="card shadow mt-2">
        <div class="card-header">
            <h5 class="text-primary">
                Previous Employment Details
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive table-striped">
                <table id="previousEmploymentDetails" class="table table-striped table-responsive table-pre-employeement css-serial" cellpadding="20%">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th></th>
                            <th>Company Name</th>
                            <th>City</th>
                            <th>Designation</th>
                            <th>From</th>
                            <th>To</th>
                            <th>CTC/Month</th>

                        </tr>
                        <tr>
                            <th>
                                <label name="EmploymentId" id="EmploymentId" value="1"></label>
                                <input type="hidden" name="CandidateId" id="CandidateId" class="form-control minwidth" />
                            </th>
                            <th style="text-align:right"><button type="button" id="addrow1" class="btn btn-success fa fa-plus add-row" data-toggle="tooltip" data-placement="top" title="Click To Add"></button></th>
                            <th>
                                <input type="text" name="CompanyName" id="CompanyName" class="form-control minwidth " />
                            </th>
                            <th>
                                <input type="text" name="City" id="City" class="form-control minwidth " />
                            </th>
                            <th>
                                <input type="text" name="Designation" id="Designation" class="form-control minwidth " />
                            </th>
                            <th>
                                <div style="display:inline-flex">
                                    <input type="text" name="WorkFrom" id="WorkFrom" class="form-control minwidth datepicker" readonly /><span class="input-group-text"><i class="fas fa-calendar-week"></i></span>
                                </div>
                            </th>
                            <th>
                                <div style="display:inline-flex">
                                    <input type="text" name="WorkTo" id="WorkTo" class="form-control  minwidth datepicker" readonly /><span class="input-group-text"><i class="fas fa-calendar-week"></i></span>
                                </div>
                            </th>
                            <th>
                                <input type="number" name="CtcMonth" id="CtcMonth" class="form-control only-number minwidth" maxlength="7" />
                            </th>

                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot class="thead-light"><tr><th valign="top" class="text-center" colspan="8">No records added</th></tr></tfoot>
                </table>
            </div>
        </div>
    </div>
    @Html.ValidationSummary(true)
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "frmReference" }))
{
    <div class="card shadow mt-2">
        <div class="card-header">
            <h5 class="text-primary">
                Reference
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive table-striped">
                <table id="reference" class="table table-striped table-responsive table-refernce css-serial">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th></th>
                            <th>Person Name</th>
                            <th>Company Name</th>
                            <th>Designation</th>
                            <th>Contact Number</th>
                        </tr>
                        <tr>
                            <th>
                                <label name="ReferenceId" id="ReferenceId" value="1"> </label>
                                <input type="hidden" name="CandidateId" class="form-control" id="CandidateId" />
                            </th>
                            <th>
                                <button type="button" class="btn btn-success fa fa-plus add-row" id="addRow" data-toggle="tooltip" data-placement="top" title="Click To Add"></button>
                            </th>
                            <th>
                                <input type="text" name="PersonName" id="PersonName" class="form-control minwidth " required />
                            </th>
                            <th>
                                <input type="text" name="CompanyName" id="CompanyName" class="form-control minwidth " required />
                            </th>
                            <th>
                                <input type="text" name="Designation" id="Designation" class="form-control minwidth " required />
                            </th>
                            <th>
                                <input type="number" name="ContactNo" id="ContactNo" class="form-control only-number minwidth" maxlength="10" required />
                            </th>


                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot class="thead-light"><tr><th valign="top" class="text-center" colspan="6">No records added(At Least one Reference Required)</th></tr></tfoot>
                </table>
                <div class="field-validation-error text-danger"
                     id="errRefmsg" style="display:none">At Least one Reference Required</div>
            </div>
        </div>
    </div>
    @Html.ValidationSummary(true)
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "frmEducationalBackground" }))
{
    <div class="card shadow mt-2">
        <div class="card-header">
            <h5 class="text-primary">
                Educational Background
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive table-striped">
                <table id="educationalBackground" class="table table-striped table-responsive table-educational-background css-serial">
                    <thead>
                        <tr>
                            <th></th>
                            <th>#</th>
                            <th>Board/University</th>
                            <th>Course/Degree</th>
                            <th>Passing Year</th>
                            <th>Grade/Percentage</th>
                        </tr>
                        <tr>
                            <th>
                                <label name="EducationalId" id="EducationalId" value="1"></label>
                                <input type="hidden" name="CandidateId" class="form-control" id="CandidateId" />
                            </th>
                            <th style="text-align:left;">
                                <button type="button" class="btn btn-success fa fa-plus add-row" id="addRow" data-toggle="tooltip" data-placement="top" title="Click To Add"></button>
                            </th>
                            <th>
                                <input type="text" name="BoardUniversityName" id="BoardUniversityName" class="form-control minwidth" />
                            </th>
                            <th>
                                <input type="text" name="CourseDegreeName" id="CourseDegreeName" class="form-control minwidth" />
                            </th>
                            <th>
                                <input type="number" name="PassingYear" id="PassingYear" class="form-control only-number minwidth" maxlength="4" />
                            </th>
                            <th>
                                <input type="text" name="GradePercentage" id="GradePercentage" class="form-control minwidth " />
                            </th>

                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot class="thead-light"><tr><th valign="top" class="text-center" colspan="6">No records added(At Least one Eduction Information Required)</th></tr></tfoot>
                </table>
                <div class="field-validation-error text-danger"
                      id="errEdumsg" style="display:none">At Least one Eductional Information Required</div>
            </div>
        </div>
    </div>
    @Html.ValidationSummary(true)
}

<div class="card shadow mt-2">
    <div class="card-header">
        <h5 class="text-primary">Other Information</h5>
    </div>
    <div class="card-body d-flex justify-content-center">
        <div class="form-row">
            <div class="col-lg-4 col-md-12 text-nowrap">
                <label class="control-label">Other Certification And Achievement</label>
            </div>
            <div class="col-lg-8 col-md-12">
                @Html.TextAreaFor(Model => Model.PersonalInfo.OtherCertification, new { @class = "form-control  col-lg-12 col-md-12", rows = "2", cols = "100" })
            </div>
        </div>
    </div>
</div>

<div style="text-align:center;margin-top:10px;">
    <input type="button" class="btn btn-primary" name="submit" onclick="SaveAllwalkin()" value="Submit" />
</div>

<div class="modal fade success-popup" id="myModal" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Thank You</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
            </div>
            <div class="modal-body text-center">
                <i class="fa fa-check" style="font-size:60px; color:green" aria-hidden="true"></i>
                <p class="lead">Your detail successfully submitted.We will get back to you soon!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Go Back</button>
                <a href="@Url.Action("PreviewDetail")" class="btn btn-default">Preview</a>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script src="~/Content/bootstrap-datepicker/js/bootstrap-datepicker.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="~/Content/toastr/js/toastr.min.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script type="text/javascript">
        $(function () {
            $('#frmpredetail').validate({
                onfocusout: false,
                invalidHandler: function (form, validator) {
                    var errors = validator.numberOfInvalids();
                    if (errors) {
                        validator.errorList[0].element.focus();
                    }
                },
                rules: {
                    CompanyName: { required: true },
                    City: { required: true },
                    Designation: { required: true },
                    WorkFrom: { required: true },
                    WorkTo: { required: true, greaterThan: '#WorkFrom' },
                    CtcMonth: { required: true }
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-invalid");
                },

                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass("is-invalid");
                },
                errorPlacement: function (error, element) {
                    return true;
                },
                onfocusout: function (element) {
                    this.element(element);
                },
            });
            jQuery.validator.addMethod("greaterThan",
                function (value, element, params) {
                    if (!/Invalid|NaN/.test(new Date(moment(value, 'DD/MM/YYYY').toDate()))) {
                        return new Date(moment(value, 'DD/MM/YYYY').toDate()) > new Date(moment($(params).val(), 'DD/MM/YYYY').toDate());
                        console.log('in if');
                    }

                    return isNaN(value) && isNaN($(params).val()) || (Number(value) < Number($(params).val()));
                }, 'Must be greater than {0}.');
            $('#frmReference').validate({
                onfocusout: false,
                invalidHandler: function (form, validator) {
                    var errors = validator.numberOfInvalids();
                    if (errors) {
                        validator.errorList[0].element.focus();
                    }
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-invalid");
                },

                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass("is-invalid");
                },
                rules: {
                    PersonName: 'required',
                    CompanyName: 'required',
                    Designation: 'required',
                    ContactNo: 'required'
                },
                errorPlacement: function (error, element) {
                    return true;
                },
                onfocusout: function (element) {
                    this.element(element);
                }
            });

            $('#frmEducationalBackground').validate({
                onfocusout: false,
                invalidHandler: function (form, validator) {
                    var errors = validator.numberOfInvalids();
                    if (errors) {
                        validator.errorList[0].element.focus();
                    }
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass("is-invalid");
                },

                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass("is-invalid");
                },
                rules: {
                    BoardUniversityName: 'required',
                    CourseDegreeName: 'required',
                    PassingYear: 'required',
                    GradePercentage: 'required'
                },
                errorPlacement: function (error, element) {
                    return true;
                },
                onfocusout: function (element) {
                    this.element(element);
                }
                //submitHandler: function (form) {
                //    // form.submit();
                //    SaveAll();

                //}
            });

        });
    </script>
    <script type="text/javascript">
        var counter = 2;
        var counter1 = 2;
        var counter2 = 2;
        var counter3 = 2;
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();

            //document.getElementById("PersonalInfo_NoOfChildren").value = 0;
            $('.divrefernce').hide();

            $('.only-number').bind('keyup paste', function () {
                this.value = this.value.replace(/[^0-9]/g, '');
            });

            $('.number-dot').bind('keyup paste', function () {
                this.value = this.value.replace(/[^0-9.]/g, '');
            });

            //All DatePicker
            //ref:https://bootstrap-datepicker.readthedocs.io/en/latest/
            //Sel Default date today
            $('.datepicker').datepicker({
                format: 'dd/mm/yyyy',
                autoclose: true
            }).on('change', function () {
            });

            dt = new Date()
            dt.setFullYear(dt.getFullYear() - 18)

            $('#PersonalInfo_DateOfBirth').datepicker('setDate', dt);
            $('#PersonalInfo_DateOfBirth').datepicker('setEndDate', dt);
            $('#PersonalInfo_EarliestJoinDate').datepicker('setDate', 'today');
            $('#PersonalInfo_EarliestJoinDate').datepicker('setStartDate', 'today');
            $('#WorkFrom').datepicker('setDate', 'today');
            $('#WorkFrom').datepicker('setEndDate', 'today');
            $('#WorkTo').datepicker('setDate', 'today');
            $('#WorkTo').datepicker('setEndDate', 'today');

            $('#PersonalInfo_DateOfBirth').datepicker({
                format: 'dd/mm/yyyy',
                endDate: dt,
                autoclose: true,
                clearBtn: true,
            }).on('change', function (e) {
                var birthDate = $(this).val().toString();
                var date = moment(birthDate, "DD/MM/YYYY");
                var age = setAge(moment(date));
                var age1 = Math.floor(age);
                if (age1 !== null) {
                    document.getElementById("Age").innerHTML = age1;
                }
            }).inputmask('99/99/9999');



            $('#PersonalInfo_EarliestJoinDate').datepicker({
                //format: 'mm/dd/yyyy',
                //startDate: new Date(),
                clearBtn: true,
                autoclose: true
            }).inputmask('99/99/9999');

            $('#WorkFrom').datepicker({
                format: 'dd/mm/yyyy',
                datesDisabled: new Date(),
                startDate: new Date(),
                clearBtn: true,
                autoclose: true
            }).on('change', function () {
                $("#WorkFrom").valid();
            });

            $('#WorkTo').datepicker({
                format: 'dd/mm/yyyy',
                endDate: new Date(),
                datesDisabled: new Date(),
                clearBtn: true,
                autoclose: true
            }).on('change', function () {
                $("#WorkTo").valid();
            });


            $(".add-row").on("click", function () {
                var tableId = $(this).parents('table').attr('id');
                var newRow = $("<tr>");
                var cols = "";
                switch (tableId) {
                    case "previousEmploymentDetails":
                        var te1 = $('#frmpredetail').valid();
                        if ($('#frmpredetail').valid()) {
                            if (counter == 2)
                                $('#previousEmploymentDetails tfoot').empty();
                            $('#previousEmploymentDetails tbody').append('<tr><td></td><td>' + $('#CompanyName').val() + '</td><td>' + $('#City').val() + '</td><td>' + $('#Designation').val() + '</td><td>' + $('#WorkFrom').val() + '</td><td>' + $('#WorkTo').val() + '</td><td>' + $('#CtcMonth').val() + '</td><td><button type="button" class="btn btn-md btn-danger fa fa-trash ibtn-Del"></button></td></tr>');
                            counter++;
                            $('#frmpredetail')[0].reset();
                            $('#WorkFrom').datepicker('setDate', 'today');
                            $('#WorkFrom').datepicker('setEndDate', 'today');
                            $('#WorkTo').datepicker('setDate', 'today');
                            $('#WorkTo').datepicker('setEndDate', 'today');
                            $("form#frmpredetail :input").each(function () {
                                $(this).removeClass('is-valid').addClass('is-invalid');
                            });
                        }
                        break;
                    case "reference":
                        var reg = $('#frmReference').valid();
                        if ($('#frmReference').valid()) {
                            if (counter1 == 2)
                                $('#reference tfoot').empty();
                            $('#reference tbody').append('<tr><td></td><td>' + $('#PersonName').val() + '</td><td>' + $(this).closest('tr').find('#Designation').val() + '</td><td>' + $(this).closest('tr').find('#CompanyName').val() + '</td><td>' + $('#ContactNo').val() + '</td><td><button type="button" class="btn btn-md btn-danger fa fa-trash ibtn-Del"></button></td></tr>');
                            counter1++;
                            $('#frmReference')[0].reset();
                            $("form#frmReference :input").each(function () {
                                $(this).removeClass('is-valid').addClass('is-invalid');
                            });
                            var eduErr = document.getElementById("errRefmsg");
                            eduErr.style.display = "none"
                        }
                        break;
                    case "educationalBackground":
                        var edu = $('#frmEducationalBackground').valid();
                        if ($('#frmEducationalBackground').valid()) {
                            if (counter2 == 2)
                                $('#educationalBackground tfoot').empty();
                            $('#educationalBackground tbody').append('<tr><td></td><td>' + $('#BoardUniversityName').val() + '</td><td>' + $('#CourseDegreeName').val() + '</td><td>' + $('#PassingYear').val() + '</td><td>' + $('#GradePercentage').val() + '</td><td><button type="button" class="btn btn-md btn-danger fa fa-trash ibtn-Del"></button></td></tr>');
                            counter2++;
                            $('#frmEducationalBackground')[0].reset();
                            $("form#frmEducationalBackground :input").each(function () {
                                $(this).removeClass('is-valid').addClass('is-invalid');
                            });
                            var eduErr = document.getElementById("errEdumsg");
                            eduErr.style.display = "none"
                        }
                        break;
                    case "language":
                        if ($('#Language option:selected').text() != '--Select Language--' && canadd()) {
                            var read = "No", speak = "No", write = "No";
                            if ($('#Read').is(":checked")) {
                                read = "Yes"
                            }
                            if ($('#Speak').is(":checked")) {
                                speak = 'Yes';
                            }
                            if ($('#Write').is(":checked")) {
                                write = 'Yes';
                            }
                            cols += '<td>' + $('#Language option:selected').text() + '</td>';
                            cols += '<td>' + read + '</td>';
                            cols += '<td>' + speak + '</td>';
                            cols += '<td>' + write + '</td>';
                            cols += '<td><button type="button" class="btn btn-md btn-danger fa fa-trash ibtn-Del"></button></td>';
                            $('#Read').prop('checked', true);
                            $('#Speak').prop('checked', true);
                            $('#Write').prop('checked', true);
                        }
                        else {
                            toastr.warning($('#Language option:selected').text() + " all ready exist");
                            cols += "";
                        }
                        newRow.append(cols);
                        $("table.table-language").append(newRow);
                        counter3++;
                        break;
                    default:
                }
            });


            $("table.table-pre-employeement").on("click", ".ibtn-Del", function (event) {
                swal({
                    title: "Are you sure?",
                    text: "Once deleted, you will not be able to recover this imaginary file!",
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                })
                    .then((willDelete) => {
                        if (willDelete) {
                            $(this).closest("tr").remove();
                            counter -= 1;
                            swal("Done! Your record has been deleted!", {
                                icon: "success",
                            });
                        }
                    });

            });
            $("table.table-refernce").on("click", ".ibtn-Del", function (event) {
                swal({
                    title: "Are you sure?",
                    text: "Once deleted, you will not be able to recover this imaginary file!",
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                })
                    .then((willDelete) => {
                        if (willDelete) {
                            $(this).closest("tr").remove();
                            counter1 -= 1;
                            swal("Done! Your record has been deleted!", {
                                icon: "success",
                            });
                            if (counter1 == 2) {
                                var eduErr = document.getElementById("errRefmsg");
                                eduErr.style.display = "block"
                            }
                        }
                    });

            });
            $("table.table-educational-background").on("click", ".ibtn-Del", function (event) {
                swal({
                    title: "Are you sure?",
                    text: "Once deleted, you will not be able to recover this imaginary file!",
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                })
                    .then((willDelete) => {
                        if (willDelete) {
                            $(this).closest("tr").remove();
                            counter2 -= 1;
                            swal("Done! Your record has been deleted!", {
                                icon: "success",
                            });
                            if (counter2 == 2) {
                                var eduErr = document.getElementById("errEdumsg");
                                eduErr.style.display = "block"
                            }
                        }
                    });

            });
            $("table.table-language").on("click", ".ibtn-Del", function (event) {
                swal({
                    title: "Are you sure?",
                    text: "Once deleted, you will not be able to recover this imaginary file!",
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                })
                    .then((willDelete) => {
                        if (willDelete) {
                            $(this).closest("tr").remove();
                            counter -= 1;
                            swal("Done! Your record has been deleted!", {
                                icon: "success",
                            });
                        }
                    });

            });
            $('input[type=radio][id=PersonalInfo_IsReference]').change(function () {
                if (this.value == 'True') {
                    $('.divrefernce').show();
                }
            });

            $('input[type=radio][id=PersonalInfo_IsReference1]').change(function () {
                if (this.value == 'False') {
                    $('.divrefernce').hide();
                    $('#PersonalInfo_ReferenceName').val('');
                    $('#PersonalInfo_ReferenceDesignation').val('');
                    $('#PersonalInfo_ReferenceMobileNo').val('');
                }
            });

            $('#asAboveCheck').change(function () {
                var Address = $('#PersonalInfo_AddressPresent').val();
                var pincode = $('#PersonalInfo_PincodePresent').val();
                var state = $("select#PersonalInfo_StatePresent").val();
                var selectedStateText = $("#PersonalInfo_StatePresent option:selected").html();
                var city = $('select#PersonalInfo_CityPresent').val();
                var selectedCityText = $("#PersonalInfo_CityPresent option:selected").html();
                if (this.checked) {
                    $('#PersonalInfo_AddressPast').val(Address);
                    $('#PersonalInfo_PinCodePast').val(pincode);
                    $('#PersonalInfo_StatePast').empty();
                    $("#PersonalInfo_StatePast").append('<option value="' + state + '">' +
                        selectedStateText + '</option>');

                    $("#CityListPast").empty();
                    $("#CityListPast").append('<option value="' + city + '">' +
                        selectedCityText + '</option>');
                }
                else {
                    $('#PersonalInfo_AddressPast').val('');
                    $('#PersonalInfo_PinCodePast').val('');
                    $('#PersonalInfo_StatePast').empty();
                    $("#PersonalInfo_StatePast").append('<option value="">--Select State--</option>');
                    $("#CityListPast").empty();
                    $("#CityListPast").append('<option value="">--Select City--</option>');
                }
                $('#asAboveCheck').val(this.checked);
            });

            $("#PersonalInfo_StatePresent").change(function () {
                $('#pre-loader').show();
                $("#PersonalInfo_CityPresent").empty();
                $("#PersonalInfo_CityPresent").append('<option value="">--Select City--</option>');
                var sId = $("select#PersonalInfo_StatePresent").val();
                if (sId !== "") {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("GetCity", "Home")',
                        dataType: 'json',
                        data: { id: $("select#PersonalInfo_StatePresent").val() },
                        success: function (result) {
                            //$('select option[value="1"]').attr("selected", true);
                            $.each(result, function (i, city) {
                                $("#PersonalInfo_CityPresent").append('<option value="' + city.CityId + '">' +
                                    city.CityName + '</option>');
                            });
                            $('#pre-loader').hide();
                        },
                        error: function (ex) {
                            alert('Failed to retrieve states city.' + ex);
                            $('#pre-loader').hide();
                        }
                    });
                }

            });

            $("#PersonalInfo_StatePast").change(function () {
                $('#pre-loader').show();
                $("#CityListPast").empty();
                $("#CityListPast").append('<option value="">--Select City--</option>');
                var sId = $("select#PersonalInfo_StatePast").val();
                if (sId !== "") {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("GetCity", "Home")',
                        dataType: 'json',
                        data: { id: $("select#PersonalInfo_StatePast").val() },
                        success: function (result) {
                            $.each(result, function (i, city) {
                                $("#CityListPast").append('<option value="' + city.CityId + '">' +
                                    city.CityName + '</option>');
                            });
                            $('#pre-loader').hide();
                        },
                        error: function (error) {
                            //toastr.error(responce.Data);
                            alert('Failed to retrieve states city.' + ex);
                            $('#pre-loader').hide();
                        }
                    });
                }
            });

            //GetDesignation	
            $("#PersonalInfo_AppliedForDepartment").change(function () {
                $('#pre-loader').show();
                $("#PersonalInfo_AppliedForDesignation").empty();
                $("#PersonalInfo_AppliedForDesignation").append('<option value="">--Select Designation--</option>');
                if ($("select#PersonalInfo_AppliedForDepartment").val() !== "") {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("GetDesignation", "Home")',
                        dataType: 'json',
                        data: { id: $("select#PersonalInfo_AppliedForDepartment").val() },
                        success: function (designations) {
                            $.each(designations, function (i, designation) {
                                $("#PersonalInfo_AppliedForDesignation").append('<option value="' + designation.DesignationId + '">' +
                                    designation.DesignationName + '</option>');
                            });
                            $('#pre-loader').hide();
                        },
                        error: function (ex) {
                            alert('Failed to retrieve designationsList.' + ex);
                            $('#pre-loader').hide();
                        }
                    });
                }

            });

            function setAge(d) {
                return moment().diff(d, 'years', true);
            }

        });
        var addSerialNumber = function () {
            $('table tr').each(function (index) {
                $(this).find('td:nth-child(1)').html(index + 1);
            });
        };

        $('#PersonalInfo_ReferenceName').blur(function () {
            if ($("input[name='PersonalInfo.IsReference']:checked").val() == 'True') {
                if ($('#PersonalInfo_ReferenceName').val() == "") {
                    document.getElementById("errRefName").innerHTML = "Please Enter Reference Name";
                }
                else { document.getElementById("errRefName").innerHTML = ""; }
            }
        });

        $('#PersonalInfo_ReferenceDesignation').blur(function () {
            if ($("input[name='PersonalInfo.IsReference']:checked").val() == 'True') {
                if ($('#PersonalInfo_ReferenceDesignation').val() == "") {
                    document.getElementById("errRefDesignation").innerHTML = "Please Enter Reference Designation";
                }
                else { document.getElementById("errRefDesignation").innerHTML = ""; }
            }
        });

        $('#PersonalInfo_ReferenceMobileNo').blur(function () {
            if ($("input[name='PersonalInfo.IsReference']:checked").val() == 'True') {
                if ($('#PersonalInfo_ReferenceName').val() == "") {
                    document.getElementById("errRefMobileNo").innerHTML = "Please Enter Reference Mobile No";
                }
                else { document.getElementById("errRefMobileNo").innerHTML = ""; }
            }
        });

        $('button.validateAll').click(function () {
            $('form').each(function () {
                $(this).valid();
            });
        });

        function SaveAll() {
            if ($('#frmdetail').valid() && counter2 != 2 && counter1 != 2) {
                $('#pre-loader').show();
                var objj = {
                    PersonalInfo: {},
                    PreviousEmploymentDetail: [],
                    Reference: [],
                    EducationBackground: [],
                    Languages: []
                };

                objj.PersonalInfo = {
                    FirstName: $("#PersonalInfo_FirstName").val(),
                    LastName: $("#PersonalInfo_LastName").val(),
                    MobileNo1: $("#PersonalInfo_MobileNo1").val(),
                    MobileNo2: $("#PersonalInfo_MobileNo2").val(),
                    EmailId: $("#PersonalInfo_EmailId").val(),
                    DateOfBirth: $("#PersonalInfo_DateOfBirth").val(),
                    Age: $("#Age").text(),
                    Gender: $("input[name='PersonalInfo.Gender']:checked").val(),
                    MaritalStaus: $("input[name='PersonalInfo.MaritalStaus']:checked").val(),
                    NoOfChildren: $("#PersonalInfo_NoOfChildren").val(),
                    AddressPresent: $("#PersonalInfo_AddressPresent").val(),
                    StatePresent: $("#PersonalInfo_StatePresent option:selected").text(),
                    CityPresent: $("#PersonalInfo_CityPresent option:selected").text(),
                    PincodePresent: $("#PersonalInfo_PincodePresent").val(),
                    AddressPast: $("#PersonalInfo_AddressPast").val(),
                    StatePast: $("#PersonalInfo_StatePast option:selected").text(),
                    CityPast: $("#CityListPast option:selected").text(),
                    PinCodePast: $("#PersonalInfo_PinCodePast").val(),
                    AppliedForDepartment: $("#PersonalInfo_AppliedForDepartment option:selected").text(),
                    AppliedForDesignation: $("#PersonalInfo_AppliedForDesignation option:selected").text(),
                    TotalExperienceInYear: $("#PersonalInfo_TotalExperienceInYear").val(),
                    EarliestJoinDate: $("#PersonalInfo_EarliestJoinDate").val(),
                    SalaryExpectation: $("#PersonalInfo_SalaryExpectation").val(),
                    Vehicle: $("input[name='PersonalInfo.Vehicle']:checked").val(),
                    JobSource: $("input[name='PersonalInfo.JobSource']:checked").val(),
                    NightShift: $("input[name='PersonalInfo.NightShift']:checked").val(),
                    IsReference: $("input[name='PersonalInfo.IsReference']:checked").val(),
                    ReferenceName: $("#PersonalInfo_ReferenceName").val(),
                    ReferenceMobileNo: $("#PersonalInfo_ReferenceMobileNo").val(),
                    ReferenceDesignation: $("#PersonalInfo_ReferenceDesignation").val(),
                    OtherCertification: $("#PersonalInfo_OtherCertification").val()
                };

                $("#previousEmploymentDetails tbody tr").each(function () {
                    var row = $(this);
                    objj.PreviousEmploymentDetail.push({
                        CompanyName: row.find("td:eq(1)").text(),
                        City: row.find("td:eq(2)").text(),
                        Designation: row.find("td:eq(3)").text(),
                        WorkFrom: row.find("td:eq(4)").text(),
                        WorkTo: row.find("td:eq(5)").text(),
                        CtcMonth: row.find("td:eq(6)").text()
                    });
                });

                $("#reference tbody tr").each(function () {
                    var row = $(this);
                    objj.Reference.push({
                        PersonName: row.find("td:eq(1)").text(),
                        CompanyName: row.find("td:eq(2)").text(),
                        Designation: row.find("td:eq(3)").text(),
                        ContactNo: row.find("td:eq(4)").text(),
                    });
                });
                $("#educationalBackground tbody tr").each(function () {
                    var row = $(this);
                    objj.EducationBackground.push({
                        BoardUniversityName: row.find("td:eq(1)").text(),
                        CourseDegreeName: row.find("td:eq(2)").text(),
                        PassingYear: row.find("td:eq(3)").text(),
                        GradePercentage: row.find("td:eq(4)").text(),
                    });
                });

                var countLanguage = 0;

                $("#language tbody tr").each(function () {
                    var row = $(this);
                    if (row.find("td:eq(0)").text() != "") {
                        objj.Languages.push({
                            LanguageType: row.find("td:eq(0)").text(),
                            Read: row.find("td:eq(1)").text(),
                            Speak: row.find("td:eq(2)").text(),
                            Write: row.find("td:eq(3)").text()
                        });
                    }

                    countLanguage = countLanguage + 1;
                });

                if (countLanguage == 0) {
                    toastr.error("At Least One Language Known Required");
                    $('#pre-loader').hide();
                    $('#Language').focus();
                }
                else {
                    $.ajax({
                        type: "POST",
                        url:'@Url.Action("SavePreInterView", "Home")',
                        data: JSON.stringify(objj),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (responce) {
                            if (responce.ContentType == "success") {
                                $("#myModal").modal('show');
                                $("#frmdetail").each(function () { this.reset() });
                                $("#frmpredetail").each(function () { this.reset() });
                                $("#frmReference").each(function () { this.reset() });
                                $("#frmEducationalBackground").each(function () { this.reset() });
                                $("#PersonalInfo_OtherCertification").val('');
                                $('#pre-loader').hide();
                            } else {
                                toastr.warning(responce.Data);
                                $('#pre-loader').hide();
                            }
                        },
                        error: function () {
                            toastr.warning(responce.Data);
                            $('#pre-loader').hide();
                        }
                    });
                }
            }
            else {
                if (counter2 == 2) {
                    var eduErr = document.getElementById("errEdumsg");
                    eduErr.style.display = "block"
                }
                if (counter1 == 2) {
                    var eduErr = document.getElementById("errRefmsg");
                    eduErr.style.display = "block"
                }
                $('#frmdetail').find("input.input-validation-error")[0].focus();
            }
        }





        function SaveAllwalkin() {
            if ($('#frmdetail').valid() && counter2 != 2 && counter1 != 2) {
                $('#pre-loader').show();
                var objj = {
                    PersonalInfo: {},
                    PreviousEmploymentDetail: [],
                    Reference: [],
                    EducationBackground: [],
                    Languages: []
                };

                objj.PersonalInfo = {
                    FirstName: $("#PersonalInfo_FirstName").val(),
                    LastName: $("#PersonalInfo_LastName").val(),
                    MobileNo1: $("#PersonalInfo_MobileNo1").val(),
                    MobileNo2: $("#PersonalInfo_MobileNo2").val(),
                    EmailId: $("#PersonalInfo_EmailId").val(),
                    DateOfBirth: $("#PersonalInfo_DateOfBirth").val(),
                    Age: $("#Age").text(),
                    Gender: $("input[name='PersonalInfo.Gender']:checked").val(),
                    MaritalStaus: $("input[name='PersonalInfo.MaritalStaus']:checked").val(),
                    NoOfChildren: $("#PersonalInfo_NoOfChildren").val(),
                    AddressPresent: $("#PersonalInfo_AddressPresent").val(),
                    StatePresent: $("#PersonalInfo_StatePresent option:selected").text(),
                    CityPresent: $("#PersonalInfo_CityPresent option:selected").text(),
                    PincodePresent: $("#PersonalInfo_PincodePresent").val(),
                    AddressPast: $("#PersonalInfo_AddressPast").val(),
                    StatePast: $("#PersonalInfo_StatePast option:selected").text(),
                    CityPast: $("#CityListPast option:selected").text(),
                    PinCodePast: $("#PersonalInfo_PinCodePast").val(),
                    AppliedForDepartment: $("#PersonalInfo_AppliedForDepartment option:selected").text(),
                    AppliedForDesignation: $("#PersonalInfo_AppliedForDesignation option:selected").text(),
                    TotalExperienceInYear: $("#PersonalInfo_TotalExperienceInYear").val(),
                    EarliestJoinDate: $("#PersonalInfo_EarliestJoinDate").val(),
                    SalaryExpectation: $("#PersonalInfo_SalaryExpectation").val(),
                    Vehicle: $("input[name='PersonalInfo.Vehicle']:checked").val(),
                    JobSource: $("input[name='PersonalInfo.JobSource']:checked").val(),
                    NightShift: $("input[name='PersonalInfo.NightShift']:checked").val(),
                    IsReference: $("input[name='PersonalInfo.IsReference']:checked").val(),
                    ReferenceName: $("#PersonalInfo_ReferenceName").val(),
                    ReferenceMobileNo: $("#PersonalInfo_ReferenceMobileNo").val(),
                    ReferenceDesignation: $("#PersonalInfo_ReferenceDesignation").val(),
                    OtherCertification: $("#PersonalInfo_OtherCertification").val()
                };

                $("#previousEmploymentDetails tbody tr").each(function () {
                    var row = $(this);
                    objj.PreviousEmploymentDetail.push({
                        CompanyName: row.find("td:eq(1)").text(),
                        City: row.find("td:eq(2)").text(),
                        Designation: row.find("td:eq(3)").text(),
                        WorkFrom: row.find("td:eq(4)").text(),
                        WorkTo: row.find("td:eq(5)").text(),
                        CtcMonth: row.find("td:eq(6)").text()
                    });
                });

                $("#reference tbody tr").each(function () {
                    var row = $(this);
                    objj.Reference.push({
                        PersonName: row.find("td:eq(1)").text(),
                        CompanyName: row.find("td:eq(2)").text(),
                        Designation: row.find("td:eq(3)").text(),
                        ContactNo: row.find("td:eq(4)").text(),
                    });
                });
                $("#educationalBackground tbody tr").each(function () {
                    var row = $(this);
                    objj.EducationBackground.push({
                        BoardUniversityName: row.find("td:eq(1)").text(),
                        CourseDegreeName: row.find("td:eq(2)").text(),
                        PassingYear: row.find("td:eq(3)").text(),
                        GradePercentage: row.find("td:eq(4)").text(),
                    });
                });

                var countLanguage = 0;

                $("#language tbody tr").each(function () {
                    var row = $(this);
                    if (row.find("td:eq(0)").text() != "") {
                        objj.Languages.push({
                            LanguageType: row.find("td:eq(0)").text(),
                            Read: row.find("td:eq(1)").text(),
                            Speak: row.find("td:eq(2)").text(),
                            Write: row.find("td:eq(3)").text()
                        });
                    }

                    countLanguage = countLanguage + 1;
                });

                if (countLanguage == 0) {
                    toastr.error("At Least One Language Known Required");
                    $('#pre-loader').hide();
                    $('#Language').focus();
                }
                else {
                    $.ajax({
                        type: "POST",
                        url:'@Url.Action("SavePreInterViewforWalkin", "Home")',
                        data: JSON.stringify(objj),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (responce) {
                            if (responce.ContentType == "success") {
                                $("#myModal").modal('show');
                                $("#frmdetail").each(function () { this.reset() });
                                $("#frmpredetail").each(function () { this.reset() });
                                $("#frmReference").each(function () { this.reset() });
                                $("#frmEducationalBackground").each(function () { this.reset() });
                                $("#PersonalInfo_OtherCertification").val('');
                                $('#pre-loader').hide();
                            } else {
                                toastr.warning(responce.Data);
                                $('#pre-loader').hide();
                            }
                        },
                        error: function () {
                            toastr.warning(responce.Data);
                            $('#pre-loader').hide();
                        }
                    });
                }
            }
            else {
                if (counter2 == 2) {
                    var eduErr = document.getElementById("errEdumsg");
                    eduErr.style.display = "block"
                }
                if (counter1 == 2) {
                    var eduErr = document.getElementById("errRefmsg");
                    eduErr.style.display = "block"
                }
                $('#frmdetail').find("input.input-validation-error")[0].focus();
            }
        }
        function canadd() {
            var is = true;
            $("#language tbody tr").each(function () {
                if ($('#Language option:selected').text() == $(this).find("td:eq(0)").text()) {
                    is = false;
                    return is;
                }
            });
            return is;
        }
    </script>
}
